Employee:
========

package htc.test;

import java.io.Serializable;

public class Employee extends Object implements Serializable{

	  
	private int employeeId;
	private String employeeName;
	private double employeeSalary;
	    
	public Employee(int employeeId, String employeeName, double employeeSalary) {
		super();
		this.employeeId = employeeId;
		this.employeeName = employeeName;
		this.employeeSalary = employeeSalary;
	}
	  
	  public int getEmployeeId() {
		return employeeId;
	}


	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}


	public String getEmployeeName() {
		return employeeName;
	}


	public void setEmployeeName(String employeeName) {
		this.employeeName = employeeName;
	}


	public double getEmployeeSalary() {
		return employeeSalary;
	}


	public void setEmployeeSalary(double employeeSalary) {
		this.employeeSalary = employeeSalary;
	}


	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + employeeId;
		return result;
	}


	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Employee other = (Employee) obj;
		if (employeeId != other.employeeId)
			return false;
		return true;
	}

	

	
	@Override
	public String toString() {
		return "Employee [employeeId=" + employeeId + ", employeeName=" + employeeName + ", employeeSalary="
				+ employeeSalary + "]";
	}
	
	  
	  
	}

===============================================================================================================
DuplicateEmployeeIDException
============================
package htc.test;

public class DuplicateEmployeeIDException extends Exception{
	
	final String ERRORMESSAGE="Duplicate Employee Id, Consider new Id";

	public String getERRORMESSAGE() {
		return ERRORMESSAGE;
	}

}

===============================================================================================================

EmployeeNotFoundException
package htc.test;

public class EmployeeNotFoundException extends Exception{

	private String errorMessage;

	public EmployeeNotFoundException(String errorMessage) { 

		super(); 
		this.errorMessage = errorMessage; 
	} 

	public String getErrorMessage() { 
		return errorMessage; 
	} 

	
}

===============================================================================================================

ICompanyServiceProvider
package htc.test;

public interface ICompanyServiceProvider {
	
	 public boolean createEmployee(Employee obj) throws DuplicateEmployeeIDException;
	 public Employee readEmployee(int employeeId) throws  EmployeeNotFoundException; 
	 public boolean  updateEmployee(int employeeId,double newSalary) throws EmployeeNotFoundException;
	 public boolean deleteEmployee(int employeeId) throws  EmployeeNotFoundException;

}

===============================================================================================================

Company:

package htc.test;

import java.util.ArrayList;

public class Company implements ICompanyServiceProvider {

	private int companyId;
	private String companyname;
	private String companyEmailId;
	private ArrayList<Employee> emplist;// has-A relation ship 


	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + companyId;
		return result;
	}


	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Company other = (Company) obj;
		if (companyId != other.companyId)
			return false;
		return true;
	}


	public Company(int companyId, String companyname, String companyEmailId, ArrayList<Employee> emplist) {
		super();
		this.companyId = companyId;
		this.companyname = companyname;
		this.companyEmailId = companyEmailId;
		this.emplist = emplist;
	}

	public int getCompanyId() {
		return companyId;
	}


	public void setCompanyId(int companyId) {
		this.companyId = companyId;
	}


	public String getCompanyname() {
		return companyname;
	}


	public void setCompanyname(String companyname) {
		this.companyname = companyname;
	}


	public String getCompanyEmailId() {
		return companyEmailId;
	}


	public void setCompanyEmailId(String companyEmailId) {
		this.companyEmailId = companyEmailId;
	}


	public ArrayList<Employee> getEmplist() {
		return emplist;
	}


	public void setEmplist(ArrayList<Employee> emplist) {
		this.emplist = emplist;
	}

	@Override
	public String toString() {
		return "Company [companyId=" + companyId + ", companyname=" + companyname + ", companyEmailId=" + companyEmailId
				+ ", emplist=" + emplist + "]";
	}

	@Override
	public boolean createEmployee(Employee obj) throws DuplicateEmployeeIDException { 
		boolean created = false; 
		boolean first=true;
		int No =obj.getEmployeeId();
		int check = No+1;
		
		for (Employee employee : emplist) { 
			if(employee.getEmployeeId() == check) { 
				throw new DuplicateEmployeeIDException(); 
			}else { 
				created=true; 
			} 
		} 
		if(created) { 
			emplist.add(obj); 
		} 
		return created; 

				
}	
	
	public Employee readEmployee(int Empnum) throws EmployeeNotFoundException { 
		
		for (Employee emp:emplist) { 
			if (emp.getEmployeeId() == Empnum)  
				return emp; 
		} 
 			throw new EmployeeNotFoundException("Employee not found for given ID "); 

	} 
	
	@override

	public boolean updateEmployee(int EmpUpdate, double salary) throws EmployeeNotFoundException { 
		boolean newSalary = false;
		Employee employee = null;
		
		for (Employee emp:emplist) { 
			if (emp.getEmployeeId() == EmpUpdate)  
			{
				emp.setEmployeeSalary(salary);
				newSalary=true;
				employee = emp;
				break;
			}
			
		}
		if(employee == null) { 
 			throw new EmployeeNotFoundException("Employee not found for given ID "); 
 		}
		return newSalary; 


	} 

	@Override 
	 	public boolean deleteEmployee(int employeeId) throws EmployeeNotFoundException { 
	 		boolean deleted = false; 
	 		Employee emp = null; 
	 		for (Employee employee : emplist) { 
	 			if(employee.getEmployeeId()==employeeId) { 
	 				emp = employee; 
	 				break; 
	 			} 
	 		} 
	 		if(emp == null) { 
	 			throw new EmployeeNotFoundException("Employee not found for given ID "); 
	 		} else { 
	 			emplist.remove(emp); 
	 			deleted = true; 
	 		} 
	 		return deleted; 
	 	} 
	 	  


}


===============================================================================================================
Eecrise13:
package htc.test;

import java.util.ArrayList;

public class exericise13 {

	public static void main(String[] args) {


		try
		{
			Employee emp1;
			ArrayList<Employee> empList = new ArrayList<Employee>(); 

			emp1 = new Employee(1001,"Smith",75000); 
			empList.add(emp1); 
			emp1 = new Employee(1002,"Aaron",89000);    
			empList.add(emp1); 
			emp1 = new Employee(1003,"David",95000); 
			empList.add(emp1); 
			emp1 = new Employee(1004,"Chris",60000); 
			empList.add(emp1); 
			emp1 = new Employee(1005,"Trump",54000); 
			empList.add(emp1); 

			Company comp = new Company (001,"Organization","test@gmail.com",empList); 

			if(comp.createEmployee(emp1));

			System.out.println("Create Successful");; 

			comp.readEmployee(1001);

			System.out.println("Read successful"); 

			comp.updateEmployee(1002, 98123);

			System.out.println("Update successful"); 
			System.out.println("Employee list before deleting --"+ empList);
			comp.deleteEmployee(1002);
			System.out.println("Employee list after deleting --"+ empList);

		}	
		catch (DuplicateEmployeeIDException e) {
			// TODO Auto-generated catch block
			//		e.printStackTrace();
		}
		catch (EmployeeNotFoundException e) {
			e.printStackTrace();
		}
		finally
		{	
			System.out.println("test complete");
		}
	}
}
