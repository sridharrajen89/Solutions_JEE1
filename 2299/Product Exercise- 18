public class Product {

	private int productId;
	private String productName;
	private double price;
	private int quantityOnHand;
	private int reorderLevel = 10;
	private int reorderQty = 50;

	public Product(int productId, String productName, double price, int quantityOnHand) {
		super();
		this.productId = productId;
		this.productName = productName;
		this.price = price;
		this.quantityOnHand = quantityOnHand;
	}

	public int getProductId() {
		return productId;
	}

	public String getProductName() {
		return productName;
	}

	public double getPrice() {
		return price;
	}

	public int getQuantityOnHand() {
		return quantityOnHand;
	}

	public int getReorderLevel() {
		return reorderLevel;
	}

	public int getReorderQty() {
		return reorderQty;
	}

	public void setProductId(int productId) {
		this.productId = productId;
	}

	public void setProductName(String productName) {
		this.productName = productName;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	public void setQuantityOnHand(int quantityOnHand) {
		this.quantityOnHand = quantityOnHand;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(price);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		result = prime * result + productId;
		result = prime * result + ((productName == null) ? 0 : productName.hashCode());
		result = prime * result + quantityOnHand;
		result = prime * result + reorderLevel;
		result = prime * result + reorderQty;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Product other = (Product) obj;
		if (Double.doubleToLongBits(price) != Double.doubleToLongBits(other.price))
			return false;
		if (productId != other.productId)
			return false;
		if (productName == null) {
			if (other.productName != null)
				return false;
		} else if (!productName.equals(other.productName))
			return false;
		if (quantityOnHand != other.quantityOnHand)
			return false;
		if (reorderLevel != other.reorderLevel)
			return false;
		if (reorderQty != other.reorderQty)
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Product [productId=" + productId + ", productName=" + productName + ", price=" + price
				+ ", quantityOnHand=" + quantityOnHand + ", reorderLevel=" + reorderLevel + ", reorderQty="
				+ reorderQty + "]";
	}
}

----------------------------------------------------------------------------------------------------------------------------------------

class ProductNotFoundException extends Exception {

	private static final long serialVersionUID = 6156181729739835234L;

	private String errorMessage;

	public ProductNotFoundException(String errorMessage) {
		super();
		this.errorMessage = errorMessage;
		System.out.println(errorMessage);
	}

	public String getErrorMessage() {
		return errorMessage;
	}

}

----------------------------------------------------------------------------------------------------------------------------------------
class InsufficientQuantityExecption extends Exception {

	private static final long serialVersionUID = 6156181729739835234L;

	private String errorMessage;

	public InsufficientQuantityExecption(String errorMessage) {
		super();
		this.errorMessage = errorMessage;
	}

	public String getErrorMessage() {
		return errorMessage;
	}

}

----------------------------------------------------------------------------------------------------------------------------------------
public class Stores {

	private ArrayList<Product> prodList;

	public ArrayList<Product> getProdList() {
		return prodList;
	}

	public void setProdList(ArrayList<Product> prodList) {
		this.prodList = prodList;
	}

	public Stores(ArrayList<Product> prodList) {
		super();
		this.prodList = prodList;
	}

	@Override
	public String toString() {
		return "Stores [prodList=" + prodList + "]";
	}

	public double sellItem(int productCode, int qtyRequired) throws ProductNotFoundException,
			InsufficientQuantityExecption {
		for (Product product : prodList) {
			if (product.getProductId() == productCode) {
				if (product.getQuantityOnHand() >= qtyRequired) {
					product.setQuantityOnHand(product.getQuantityOnHand() - qtyRequired);
				} else
					throw new InsufficientQuantityExecption("Not Enough Quantity");

				if (product.getQuantityOnHand() <= product.getReorderLevel())
					System.out.println("purchase re-order made for " + product.getReorderQty());
				return (qtyRequired * product.getPrice());
			}
		}
		throw new ProductNotFoundException("Product not found");
	}

	public void updateStock(int productCode, int arrivedQty) throws ProductNotFoundException {
		boolean isUpdated = false;
		for (Product product : prodList) {
			if (product.getProductId() == productCode) {
				product.setQuantityOnHand(product.getQuantityOnHand() + arrivedQty);
				isUpdated = true;
			}
		}
		if (isUpdated = false)
			throw new ProductNotFoundException("Product not found");
	}

}

----------------------------------------------------------------------------------------------------------------------------------------
public class ProductTest {

	public static void main(String[] args) {
		Product prod;
		ArrayList<Product> prodList = new ArrayList<Product>();
		try {
			prod = new Product(111, "IceCream", 10, 10);
			prodList.add(prod);
			prod = new Product(222, "Kit-Kat", 20, 20);
			prodList.add(prod);

			Stores stores = new Stores(prodList);
			System.out.println(stores);
			System.out.println(stores.sellItem(111, 05));
			System.out.println(stores);
			stores.updateStock(222, 10);
			System.out.println(stores);

		} catch (ProductNotFoundException PNF) {
			PNF.printStackTrace();
		} catch (InsufficientQuantityExecption IQ) {
			IQ.printStackTrace();
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			prodList.clear();
		}
	}

}

----------------------------------------------------------------------------------------------------------------------------------------
