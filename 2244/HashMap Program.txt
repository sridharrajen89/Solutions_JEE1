HashMap Example
-------------------------
package com.htc.javaweek2;

import java.util.Collection;
import java.util.HashMap;

public class CompanyHashMap implements ICompanyServiceProvider{
	   private int companyId;
	   private String companyname;
	   private String companyEmailId;
	   private HashMap<Integer, Employee> empHashMap;
	   //Constructor
	public CompanyHashMap(int companyId, String companyname, String companyEmailId,HashMap<Integer, Employee> empHashMap) {
		super();
		this.companyId = companyId;
		this.companyname = companyname;
		this.companyEmailId = companyEmailId;
		this.empHashMap = empHashMap;
	}
	//getters & setters
	public int getCompanyId() {
		return companyId;
	}
	public void setCompanyId(int companyId) {
		this.companyId = companyId;
	}
	public String getCompanyname() {
		return companyname;
	}
	public void setCompanyname(String companyname) {
		this.companyname = companyname;
	}
	public String getCompanyEmailId() {
		return companyEmailId;
	}
	public void setCompanyEmailId(String companyEmailId) {
		this.companyEmailId = companyEmailId;
	}
	public HashMap<Integer, Employee> getEmplist() {
		return empHashMap;
	}
	public void setEmplist(HashMap<Integer, Employee> emplist) {
		this.empHashMap = emplist;
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + companyId;
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CompanyHashMap other = (CompanyHashMap) obj;
		if (companyId != other.companyId)
			return false;
		return true;
	}
	@Override
	public boolean createEmployee(Employee obj) throws DuplicateEmployeeIDException {
		 if (empHashMap.get(obj.getEmployeeId()) != null)
		     throw  new DuplicateEmployeeIDException();
		 	 empHashMap.put(obj.getEmployeeId(),obj);
		 	 return true;
	}
	@Override
	public Employee readEmployee(int employeeId) throws EmployeeNotFoundException {
		if (empHashMap.get(employeeId) != null)
			  return empHashMap.get(employeeId);
		  else 
		     throw  new EmployeeNotFoundException("Employee is not found ");
	}
	@Override
	public boolean updateEmployee(int employeeId, double newSalary) throws EmployeeNotFoundException {
		if (empHashMap.get(employeeId) != null) {
			empHashMap.get(employeeId).setEmployeeSalary(newSalary);
			  return true;
		  }
		  throw  new EmployeeNotFoundException("Employee is not found ");
	}
	@Override
	public boolean deleteEmployee(int employeeId) throws EmployeeNotFoundException {
		if (empHashMap.get(employeeId) != null) {
			empHashMap.remove(employeeId);
			  return true;
		  }
	      throw  new EmployeeNotFoundException("Employee is not found ");
	}
	
		   
}


-----------------------------Main ----------------------

package com.htc.javaweek2;

import java.util.HashMap;

public class CompanyNameHashMapMain {

	public static void main(String[] args) throws EmployeeNotFoundException,DuplicateEmployeeIDException {
		try {
			HashMap<Integer, Employee> empHashMap = new HashMap<Integer, Employee>();
			empHashMap.put(100, new Employee (100,"HashTest1",10000));
			empHashMap.put(101, new Employee (101,"HashTest2",20000));
			CompanyHashMap c = new CompanyHashMap(111,"HTC","htc@gmail.com",empHashMap);
			System.out.println(empHashMap);
			c.updateEmployee(100, 111111);
			System.out.println("After Update.." + empHashMap);
			System.out.println("Read Method.."+c.readEmployee(100));
			c.createEmployee(new Employee(102,"HashTest5",50000));
			System.out.println("After Create.." + empHashMap);
			c.deleteEmployee(100);
			System.out.println("After Delete.." + empHashMap);
		} catch(EmployeeNotFoundException e1) {
			e1.printStackTrace();
		} catch(DuplicateEmployeeIDException e2) {
			e2.printStackTrace();
		} catch(Exception e3) {
			e3.printStackTrace();
		}
	}

}
------------------------------------------------------------
package com.htc.javaweek2;

public interface ICompanyServiceProvider {
	public boolean createEmployee(Employee obj) throws DuplicateEmployeeIDException;
	  public Employee readEmployee(int employeeId) throws EmployeeNotFoundException; 
	  public boolean updateEmployee(int employeeId,double newSalary) throws EmployeeNotFoundException;
	  public boolean deleteEmployee(int employeeId) throws EmployeeNotFoundException;

}

------------------------------------------------------------------------
package com.htc.javaweek2;

public class EmployeeNotFoundException extends Exception{
	private String errorMessage;
	//Constructor
	public EmployeeNotFoundException(String errorMessage) {
		super();
		this.errorMessage = errorMessage;
	}
	//getters
	public String getErrorMessage() {
		return errorMessage;
	}

}

-------------------------------------------
package com.htc.javaweek2;

public class DuplicateEmployeeIDException extends Exception {
	final String ERRORMESSAGE="Duplicate Employee Id, Consider new Id";

	public String getERRORMESSAGE() {
		return ERRORMESSAGE;
	}
	
}


=============================Output-=======================
{100=Employee [employeeId=100, employeeName=HashTest1, employeeSalary=10000.0], 101=Employee [employeeId=101, employeeName=HashTest2, employeeSalary=20000.0]}
After Update..{100=Employee [employeeId=100, employeeName=HashTest1, employeeSalary=111111.0], 101=Employee [employeeId=101, employeeName=HashTest2, employeeSalary=20000.0]}
Read Method..Employee [employeeId=100, employeeName=HashTest1, employeeSalary=111111.0]
After Create..{100=Employee [employeeId=100, employeeName=HashTest1, employeeSalary=111111.0], 101=Employee [employeeId=101, employeeName=HashTest2, employeeSalary=20000.0], 102=Employee [employeeId=102, employeeName=HashTest5, employeeSalary=50000.0]}
After Delete..{101=Employee [employeeId=101, employeeName=HashTest2, employeeSalary=20000.0], 102=Employee [employeeId=102, employeeName=HashTest5, employeeSalary=50000.0]}

